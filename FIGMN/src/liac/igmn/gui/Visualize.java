/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package liac.igmn.gui;

import com.panayotis.gnuplot.JavaPlot;
import com.panayotis.gnuplot.plot.DataSetPlot;
import com.panayotis.gnuplot.style.RgbPlotColor;
import com.panayotis.gnuplot.style.Style;
import java.util.ArrayList;
import java.util.List;
import liac.igmn.core.*;
import liac.igmn.util.MatrixUtil;
import org.ejml.simple.SimpleEVD;
import org.ejml.simple.SimpleMatrix;
/**
 *
 * @author liac01
 */
public class Visualize extends javax.swing.JDialog {

    protected IGMN poCurrent;
    protected IGMN poLast;
    protected SimpleMatrix poData;
    protected int pnNumInput;
    protected int pnNumClasses;
    protected RgbPlotColor[] paColors;
    
    /**
     * Creates new form Visualize
     * @param parent
     * @param modal
     * @param toCurrent
     * @param toLast
     * @param toData
     * @param tnNumInput
     */
    public Visualize(java.awt.Frame parent, boolean modal, IGMN toCurrent, IGMN toLast, SimpleMatrix toData, int tnNumInput) {
        super(parent, modal);
        this.poCurrent = toCurrent;
        this.poLast = toLast;
        this.poData = toData;
        this.pnNumInput = tnNumInput;
        this.pnNumClasses = toData.numRows() - tnNumInput;
        initComponents();
        this.mxLoadComboBox();
        this.mxLoadParameters();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbbFeatureOne = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cbbFeatureTwo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txnSd = new javax.swing.JTextField();
        cmbReturn = new javax.swing.JButton();
        cmbVisualize = new javax.swing.JButton();
        cmbVisualize1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("VIsualize");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Select First Dimention:");

        jLabel2.setText("Select Second Dimention:");

        jLabel3.setText("Standard Deviation (1 - 2 - 3):");

        txnSd.setText("2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbbFeatureOne, 0, 84, Short.MAX_VALUE)
                    .addComponent(cbbFeatureTwo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txnSd))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbbFeatureOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbbFeatureTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txnSd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cmbReturn.setText("Return");
        cmbReturn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmbReturnMousePressed(evt);
            }
        });

        cmbVisualize.setText("Visualize");
        cmbVisualize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmbVisualizeMousePressed(evt);
            }
        });

        cmbVisualize1.setText("Visualize Last");
        cmbVisualize1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmbVisualize1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cmbVisualize1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbVisualize, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbReturn)
                    .addComponent(cmbVisualize)
                    .addComponent(cmbVisualize1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbReturnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbReturnMousePressed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cmbReturnMousePressed

    private void cmbVisualizeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbVisualizeMousePressed
        // TODO add your handling code here:
        this.mxVisualize(this.poCurrent);
    }//GEN-LAST:event_cmbVisualizeMousePressed

    private void cmbVisualize1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbVisualize1MousePressed
        // TODO add your handling code here:
        this.mxVisualize(this.poLast);
    }//GEN-LAST:event_cmbVisualize1MousePressed

    private void mxLoadParameters()
    {
        this.paColors = new RgbPlotColor[10]; 
        this.paColors[0] = new RgbPlotColor(255, 0, 0);
        this.paColors[1] = new RgbPlotColor(0, 255, 0);
        this.paColors[2] = new RgbPlotColor(0, 0, 255);
        this.paColors[3] = new RgbPlotColor(255, 255, 0);
        this.paColors[4] = new RgbPlotColor(0, 255, 255);
        this.paColors[5] = new RgbPlotColor(255, 0, 255);
        this.paColors[6] = new RgbPlotColor(128, 0, 0);
        this.paColors[7] = new RgbPlotColor(0, 128, 0);
        this.paColors[8] = new RgbPlotColor(0, 0, 128);
        this.paColors[9] = new RgbPlotColor(128, 0, 128);
    }    

    private void mxLoadComboBox()
    {
        Integer laClases[] = new Integer[this.pnNumInput];
        String lsClasses[] = new String[this.pnNumInput];
        BasicComboBoxModel loModel, loModelTwo;
        
        for(int i = 0; i < this.pnNumInput; i++)
        {
            laClases[i] = i;
            lsClasses[i] = "X" + i;
        }
        loModel = new BasicComboBoxModel(laClases, lsClasses);
        loModelTwo = new BasicComboBoxModel(laClases, lsClasses);
        
        this.cbbFeatureOne.setModel(loModel);
        this.cbbFeatureOne.setSelectedIndex(0);
        
        this.cbbFeatureTwo.setModel(loModelTwo);
        this.cbbFeatureTwo.setSelectedIndex(0);
    }
    
    private void mxVisualize(IGMN toIGMN)
    {
        int lnIndexOne = ((BasicComboBoxModelObject)this.cbbFeatureOne.getSelectedItem()).getCodigo();
        int lnIndexTwo = ((BasicComboBoxModelObject)this.cbbFeatureTwo.getSelectedItem()).getCodigo();
        int lnSd = Integer.parseInt(this.txnSd.getText());
		
		
		this.mxVisualize(toIGMN, lnIndexOne, lnIndexTwo, lnSd);
    }
	
	public void mxVisualize(IGMN loIGMN, int tnIndexOne, int tnIndexTwo, int tnSd)
    {
        DataSetPlot ldsDatasetPlot;
                
        //Extract covariance matrix
        
        JavaPlot loPlot = new JavaPlot();
        
        loPlot.setTitle("DataSet");
        loPlot.getAxis("x").setLabel("X" + tnIndexOne + " axis");
        loPlot.getAxis("y").setLabel("X" + tnIndexTwo + " axis");

		SimpleMatrix output = loIGMN.cluster(this.poData);
            
		List<SimpleMatrix> clusters = new ArrayList<>();             

		for(int i = 0; i < loIGMN.getSize(); i++)
			clusters.add(new SimpleMatrix(0, 2));

		for(int i = 0; i < this.poData.numCols(); i++)
		{
			int numCluster = (int)output.get(i, 0);                  
			int numElements = clusters.get(numCluster).numRows();
			clusters.get(numCluster).getMatrix().reshape(numElements + 1, 2,true);
			clusters.get(numCluster).set(numElements, 0, this.poData.get(0, i));
			clusters.get(numCluster).set(numElements, 1, this.poData.get(1, i));
		}
		
		for(int i = 0; i < clusters.size(); i++)
		{            
			if(clusters.get(i).numRows() == 0)
				continue;
			ldsDatasetPlot = new DataSetPlot(MatrixUtil.toDouble(clusters.get(i)));
			ldsDatasetPlot.getPlotStyle().setStyle(Style.POINTS);
			ldsDatasetPlot.setTitle("cluster" + i);
			loPlot.addPlot(ldsDatasetPlot);
		}
        
        for(int i = 0; i < loIGMN.getSize(); i++)
        {
            ldsDatasetPlot = this.mxGetDataSetEllipsoid( this.mxGetCovarianceMatrix(tnIndexOne, tnIndexTwo, loIGMN.getInvCovs().get(i).invert()), 
                                                         this.getMeanMatrix(tnIndexOne, tnIndexTwo, loIGMN.getMeans().get(i)), tnSd);
            
            ldsDatasetPlot.setTitle("Ellipsoid " + i);            
            loPlot.addPlot(ldsDatasetPlot); 
        }
        
        loPlot.plot();
    }
    
    private SimpleMatrix mxGetCovarianceMatrix(int tnIndexOne, int tnIndexTwo, SimpleMatrix toMatrix)
    {
        SimpleMatrix loCov = new SimpleMatrix(2, 2);
        
        loCov.set(0, 0, toMatrix.get(tnIndexOne, tnIndexOne));
        loCov.set(0, 1, toMatrix.get(tnIndexOne, tnIndexTwo));
        loCov.set(1, 0, toMatrix.get(tnIndexTwo, tnIndexOne));
        loCov.set(1, 1, toMatrix.get(tnIndexTwo, tnIndexTwo));
                
        return loCov;
    }
    
    private SimpleMatrix getMeanMatrix(int tnIndexOne, int tnIndexTwo, SimpleMatrix toMatrix)
    {
        SimpleMatrix loMean = new SimpleMatrix(2, 2);
        
        loMean.set(0, 0, toMatrix.get(tnIndexOne, 0));
        loMean.set(1, 0, toMatrix.get(tnIndexTwo, 0));
        
        return loMean;
    }
    
    private DataSetPlot mxGetDataSetEllipsoid(SimpleMatrix toCovs, SimpleMatrix toMean, int tnSd)
    {
        DataSetPlot loDatasetPlot;
        SimpleMatrix ellipsoid = mxGetEllipsoid(toCovs, toMean, tnSd, 50);
        
        loDatasetPlot = new DataSetPlot(MatrixUtil.toDouble(ellipsoid.transpose()));
        loDatasetPlot.getPlotStyle().setStyle(Style.LINES);
        
        return loDatasetPlot;
    }
    
    /**
     * 
     * @param toCov: Covariance Matrix
     * @param toMean: Mean of gaussian component
     * @param loSD: Number of Standard deviation
     * @param toNTPS: NUmber of points for ellipsoid
     * @return 
     */
    public static SimpleMatrix mxGetEllipsoid(SimpleMatrix toCov, SimpleMatrix toMean, double loSD, int toNTPS)
    {
        SimpleMatrix loAP = new SimpleMatrix(2, toNTPS), loD, loV, loBP;
        SimpleEVD loEig;
        double lnValue;
        int lnNumEigen;
        
        // Number of points for ellipsoid
        for (int i = 0; i < toNTPS; i++) 
        {
            lnValue = (2 * Math.PI / (double) (toNTPS - 1)) * i;
            loAP.set(0, i, Math.cos(lnValue));
            loAP.set(1, i, Math.sin(lnValue));            
        }
        
        // Get Eigenvalues and Eigenvectors
        loEig = toCov.eig();
        lnNumEigen = loEig.getNumberOfEigenvalues();
        
        loD = new SimpleMatrix(lnNumEigen, lnNumEigen); 
        loV = new SimpleMatrix(lnNumEigen, lnNumEigen);
                
        for(int i = 0; i < lnNumEigen; i++)
        {
            loD.set(i, i, loEig.getEigenvalue(i).getReal());            
            for (int j = 0; j < lnNumEigen; j++) 
            {
                loV.set(j, i, loEig.getEigenVector(i).get(j));
            }
        }
            
        // Convert variance to sdwidth*sd
        loD = sqrtMatrix(loD).scale(loSD);
        loBP = loV.mult(loD).mult(loAP);
        
        // Finally values of ellipsoid
        for (int i = 0; i < loAP.numCols(); i++) 
        {
            loBP.set(0, i, loBP.get(0, i) + toMean.get(0, 0));
            loBP.set(1, i, loBP.get(1, i) + toMean.get(1, 0));            
        }
        
        return loBP;
    }
    
    public static SimpleMatrix sqrtMatrix(SimpleMatrix toMatrix)
    {
        for (int i = 0; i < toMatrix.numRows(); i++) 
            for (int j = 0; j < toMatrix.numCols(); j++)
                toMatrix.set(i, j, Math.sqrt(toMatrix.get(i, j)));            
        
        return toMatrix;
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbbFeatureOne;
    private javax.swing.JComboBox<String> cbbFeatureTwo;
    private javax.swing.JButton cmbReturn;
    private javax.swing.JButton cmbVisualize;
    private javax.swing.JButton cmbVisualize1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txnSd;
    // End of variables declaration//GEN-END:variables
}
